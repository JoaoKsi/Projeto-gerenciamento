class CadastroPrePago:
    def __init__(self, nome, CPF, Usuario, senha, horas):
        self.nome = nome
        self.CPF = CPF
        self.Usuario = Usuario
        self.senha = senha
        self.horas = horas


    def sobre(self):    
        print(f'Nome: {self.nome}\nCPF: {self.CPF}\nUsuário: {self.Usuario}\nSenha: {self.senha}')


    def escolhe_pc(self, pc):
        print(f'O pc {pc} está sendo usado pelo usuário {self.Usuario}')


    def verificar_horas(self):    
        print(f'O usuário {self.Usuario} tem {self.horas} horas restantes')




class CadastroAssinatura:
    def __init__(self, nome, CPF, Usuario, senha, tipo_assinatura):
        self.nome = nome
        self.CPF = CPF
        self.Usuario = Usuario
        self.senha = senha
        self.tipo_assinatura = tipo_assinatura


    def sobre(self):    
        print(f'Nome: {self.nome}\nCPF: {self.CPF}\nUsuário: {self.Usuario}\nTipo de Assinatura: {self.tipo_assinatura}')




class AssinaturaGM(CadastroAssinatura):
    def __init__(self, nome, CPF, Usuario, senha):
        super().__init__(nome, CPF, Usuario, senha, "Gamer Mensal")


    def acessar_pc_potente(self):
        print(f'Usuário {self.Usuario} está acessando PCs gamers de alto desempenho.')




class AssinaturaPM(CadastroAssinatura):
    def __init__(self, nome, CPF, Usuario, senha):
        super().__init__(nome, CPF, Usuario, senha, "Premium Mensal")


    def acessar_todos_pcs(self):
        print(f'Usuário {self.Usuario} pode acessar qualquer PC.')




class ConfigPC:
    def __init__(self, numeropc, processador, RAM, placaV):
        self.numeropc = numeropc
        self.processador = processador
        self.RAM = RAM
        self.placaV = placaV
       
    def mostrar_config(self):
        print(f'PC {self.numeropc} tem a seguinte configuração: processador: {self.processador}, RAM: {self.RAM} e Placa de Vídeo: {self.placaV}.')


usuario_prepago = CadastroPrePago('João Gabriel', '084555698', 'xxgamer123xx', 'maeepai123', 3)
usuario_prepago.sobre()
usuario_prepago.escolhe_pc('5')
usuario_prepago.verificar_horas()


usuario_gamer = AssinaturaGM('Eduardo Gabriel', '123456789', 'patolino', 'senhazica123')
usuario_gamer.sobre()
usuario_gamer.acessar_pc_potente()        


usuario_premium = AssinaturaPM('Pedro Agostinho', '55566622309', 'bananinha', 'seupai450')
usuario_premium.sobre()
usuario_premium.acessar_todos_pcs()


pc1 = ConfigPC('1','I3 6300', '4GB', 'GT730')
pc2 = ConfigPC('2','Ryzen 5 4300', '4GB', 'RX580')
pc3 = ConfigPC('3','Ryzen 5 5600', '8GB', 'GTX1660')
pc4 = ConfigPC('4','I5 12500','16GB', 'RTX2060')
pc5 = ConfigPC('5','I7 14700', '32GB', 'RTX3070 super')
pc6 = ConfigPC('6','Ryzen 9 7950X3D','32GB','RTX4080 TI')
pc3.mostrar_config()




class RegistroAT:
    def __init__(self, equipamento, problema, tecnico_responsavel, prazo_estima):
        self.equipamento = equipamento
        self.problema = problema
        self.tecnico_responsavel = tecnico_responsavel
        self.prazo_estima = prazo_estima
        self.status = "pendente"
        self.historico_reparos = []


    def registrar_problema(self):
        print(f'registrando problema para o equipamento: {self.equipamento}')
        print(f'problema: {self.problema}')
        print(f'tecnico responsavel: {self.tecnico_responsavel}')
        print(f'prazo estimado: {self.prazo_estima}')


    def atualizar_status(self, status):
        self.status = status
        print(f'status atualizado para: {self.status}')


    def adicionar_reparo_ao_historico(self, descricao_reparo):
        self.historico_reparos.append(descricao_reparo)
        print(f'reparo adicionado ao historico: {descricao_reparo}')


    def mostrar_historico_reparos(self):
        print(f'historico de reparos para o equipamento: {self.equipamento}')
        for reparo in self.historico_reparos:
            print(f"- {reparo}")


atendimento = RegistroAT("notebook", "tela quebrada", "Pedro", "3 dias")
atendimento.registrar_problema()
atendimento.atualizar_status("finalizado")
atendimento.adicionar_reparo_ao_historico("tela substituida")
atendimento.adicionar_reparo_ao_historico("teste de funcionamento concluido")
atendimento.mostrar_historico_reparos()
